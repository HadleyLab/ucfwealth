{ns system
 import #{aidbox
          aidbox.rest
          aidbox.search-parameter.v1
          aidbox.repository.v1
          beda-emr-core.questionnaire
          hl7-fhir-r4-core
          emr-profiles
          zen.fhir}

 box
 {:zen/tags #{aidbox/system}
  :zen/desc "Beda EMR"
  :services {:seed seed
             :seed-fixtures seed-fixtures
             :seed-fixtrures-policy access-policies
             :repositories repositories}}

 seed
 {:zen/tags  #{aidbox/service}
  :engine    aidbox/seed
  :files ["seeds.ndjson.gz"]}

 seed-fixtures
 {:zen/tags  #{aidbox/service}
  :engine    aidbox/seed-v2
  :resources
  {:Client {:web {:auth {:implicit {:redirect_uri #env FHIR_EMR_AUTH_URL}}
                  :first_party true
                  :grant_types [:implicit]}
            :ucf-app {:secret #env UCF_APP_CLIENT_SECRET
                      :first_party true
                      :grant_types [:basic]}
            :sdc-ide {:auth {:implicit {:redirect_uri #env SDC_IDE_AUTH_URL}}
                      :first_party true
                      :grant_types [:implicit]}
            :testAuth {:grant_types [:password]
                       :secret "123456"}
            :anonymous {:grant_types [:basic]
                        :secret "secret"}
            :twofawebhook {:grant_types [:basic]
                           :secret #env TWO_FA_SECRET}
            :patient-questionnaire {:grant_types [:basic]
                                    :secret "secret"}}
   :AidboxConfig {:provider {:provider
                             {:console {:type "console"}
                              :postmark {:type "postmark"
                                         :from "no-reply@ucfwealth.app"
                                         :api-key #env POSTMARK_TOKEN}
                              :default #env SMTP_PROVIDER}}}
   :AuthConfig {:app {:theme {:brand "UCF MammoChat",
                              :title "UCF MammoChat",
                              :styleUrl #env AIDBOX_CSS}
                      :twoFactor {:issuerName #env TWO_FACTOR_ISSUER_NAME,
                                  :validPastTokensCount #env-integer TWO_FACTOR_VALID_PAST_TOKENS_COUNT,
                                  :webhook {:endpoint #env TWO_FACTOR_WEBHOOK_URL
                                            :headers {:Authorization #env TWO_FACTOR_WEBHOOK_AUTHORIZATION}}}}},
   :AidboxQuery {:provenance-by-source
                 {:query "select resource || jsonb_build_object('resourceType', 'Provenance', 'id', id) as resource from provenance  where array_to_string(knife_extract_text(resource,'[[\"entity\",\"what\",\"uri\"]]'),'') like {{params.source}}"
                  :params {:source {:type "string" :format "%%%s%%" :isRequired true}}}
                 :provenance-by-target
                 {:query "select resource || jsonb_build_object('resourceType', 'Provenance', 'id', id) as resource from provenance where array_to_string(knife_extract_text(resource,'[[\"target\",\"uri\"]]'),'') like {{params.target}}"
                  :params {:source {:type "string" :format "%%%s%%" :isRequired true}}}
                 :clear-patient-observations
                 {:type :execute
                  :query "DELETE FROM \"observation\" WHERE resource#>>'{subject, id}' = {{params.patient}}"
                  :params {:patient {:type "string" :isRequired true}}}}
   :TokenIntrospector {:appleid
                       {:type "jwt"
                        :jwks_uri "https://appleid.apple.com/auth/keys"
                        :jwt {:iss "https://appleid.apple.com"}}
                       :datasequence
                       {:type "jwt"
                        :jwt {:iss "https://ingest.emr.beda.software" :secret #env DATASEQUENCE_JWT_SECRET}}}
   :Endpoint {:emr-datasequence-records
              {:identifier [{:system "https://fhir.emr.beda.software/CodeSystem/consent-subject"
                             :value "emr-datasequence-records"}]
               :status "active"
               :name "Activity Data"
               :address "https://ingest.emr.beda.software"
               :connectionType {:system "https://spec.openapis.org/oas/v3.1.0"
                                :code "openapi"}
               :payloadType [{:coding [{:system "http://terminology.hl7.org/CodeSystem/endpoint-payload-type"
                                        :code "urn:ihe:pcc:xphr:2007"}]}]}}
   :Attribute {:Mapping.type {:type {:resourceType "Entity" :id "code"}
                              :path [:type]
                              :resource {:resourceType "Entity" :id "Mapping"}
                              :enum ["JUTE" "FHIRPath"]}}}}

 access-policies
 {:zen/tags  #{aidbox/service}
  :engine    aidbox/seed-v2
  :resources {:AccessPolicy {:admin-policy {:engine "allow"
                                            :roleName "admin"}}}}

 encounter-participant-display
 {:zen/tags #{aidbox.search-parameter.v1/search-parameter}
  :name "participant-display"
  :type :string
  :resource {:resourceType "Entity" :id "Encounter"}
  :expression [["participant", "individual", "display"]]}

 encounter-repository
 {:zen/tags #{aidbox.repository.v1/repository}
  :resourceType "Encounter"
  :extra-parameter-sources :all ; allow to use SearchParameters from outside of repo
  :search-parameters #{encounter-participant-display}}

 charge-item-definition-healthcare-service
 {:zen/tags #{aidbox.search-parameter.v1/search-parameter}
  :name "healthcare-service"
  :type :reference
  :resource {:resourceType "Entity" :id "ChargeItemDefinition"}
  :expression [["healthcareService"]]}

 charge-item-definition-repository
 {:zen/tags #{aidbox.repository.v1/repository}
  :resourceType "ChargeItemDefinition"
  :extra-parameter-sources :all ; allow to use SearchParameters from outside of repo
  :search-parameters #{charge-item-definition-healthcare-service}}
 
 SetPasswordToken
 {:zen/tags #{zen/schema zen.fhir/base-schema}
  :zen.fhir/type "SetPasswordToken"
  :zen.fhir/version "0.6.32"
  :type zen/map
  :confirms #{zen.fhir/Resource}
  :require #{:user :status :dateTimeExpired}
  :keys {:user {:confirms #{zen.fhir/Reference}
                :zen.fhir/type "Reference"}
         :status {:type zen/string}
         :dateTimeExpired {:type zen/string}}}

 set-password-token-user
 {:zen/tags #{aidbox.search-parameter.v1/search-parameter}
  :name "user"
  :type :reference
  :resource {:resourceType "Entity" :id "SetPasswordToken"}
  :expression [["user"]]}
 
 set-password-token-status
 {:zen/tags #{aidbox.search-parameter.v1/search-parameter}
  :name "status"
  :type :token
  :resource {:resourceType "Entity" :id "SetPasswordToken"}
  :expression [["status"]]}

 set-password-token-repository
 {:zen/tags #{aidbox.repository.v1/repository}
  :resourceType "SetPasswordToken"
  :base-profile SetPasswordToken
  :extra-parameter-sources :all
  :search-parameters #{set-password-token-user set-password-token-status}}

 repositories
 {:zen/tags #{aidbox/service}
  :engine aidbox.repository.v1/engine
  :repositories #{encounter-repository charge-item-definition-repository set-password-token-repository}
  :load-default true}}
