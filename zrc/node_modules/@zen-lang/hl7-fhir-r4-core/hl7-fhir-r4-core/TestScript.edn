{ns hl7-fhir-r4-core.TestScript,
 import
 #{hl7-fhir-r4-core.integer
   hl7-fhir-r4-core.value-set.mimetypes
   hl7-fhir-r4-core.value-set.defined-types
   hl7-fhir-r4-core.BackboneElement
   hl7-fhir-r4-core.canonical
   hl7-fhir-r4-core.markdown
   hl7-fhir-r4-core.code
   zen.fhir
   hl7-fhir-r4-core.value-set.publication-status
   hl7-fhir-r4-core.UsageContext
   hl7-fhir-r4-core.boolean
   hl7-fhir-r4-core.dateTime
   hl7-fhir-r4-core.string
   hl7-fhir-r4-core.Coding
   hl7-fhir-r4-core.value-set.assert-direction-codes
   hl7-fhir-r4-core.id
   hl7-fhir-r4-core.uri
   hl7-fhir-r4-core.Reference
   hl7-fhir-r4-core.value-set.assert-response-code-types
   hl7-fhir-r4-core.ContactDetail
   hl7-fhir-r4-core.Element
   hl7-fhir-r4-core.DomainResource
   hl7-fhir-r4-core.value-set.http-operations
   hl7-fhir-r4-core.CodeableConcept
   hl7-fhir-r4-core.Identifier
   hl7-fhir-r4-core.value-set.assert-operator-codes},
 schema
 {:zen.fhir/version "0.5.18",
  :confirms
  #{hl7-fhir-r4-core.DomainResource/schema zen.fhir/Resource},
  :zen/tags #{zen/schema zen.fhir/base-schema},
  :zen.fhir/profileUri
  "http://hl7.org/fhir/StructureDefinition/TestScript",
  :require #{:name :status :url},
  :type zen/map,
  :zen/desc
  "A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.",
  :keys
  {:description
   {:confirms #{hl7-fhir-r4-core.markdown/schema},
    :zen/desc "Natural language description of the test script"},
   :date
   {:confirms #{hl7-fhir-r4-core.dateTime/schema},
    :fhir/flags #{:SU},
    :zen/desc "Date last changed"},
   :variable
   {:type zen/vector,
    :every
    {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
     :type zen/map,
     :keys
     {:description
      {:confirms #{hl7-fhir-r4-core.string/schema},
       :zen/desc "Natural language description of the variable"},
      :path
      {:confirms #{hl7-fhir-r4-core.string/schema},
       :zen/desc "XPath or JSONPath against the fixture body"},
      :headerField
      {:confirms #{hl7-fhir-r4-core.string/schema},
       :zen/desc "HTTP header field name for source"},
      :expression
      {:confirms #{hl7-fhir-r4-core.string/schema},
       :zen/desc "The FHIRPath expression against the fixture body"},
      :_path {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :name
      {:confirms #{hl7-fhir-r4-core.string/schema},
       :zen/desc "Descriptive name for this variable"},
      :_hint {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :hint
      {:confirms #{hl7-fhir-r4-core.string/schema},
       :zen/desc "Hint help text for default value to enter"},
      :_expression {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :_description {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :_defaultValue {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :_headerField {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :_name {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :sourceId
      {:confirms #{hl7-fhir-r4-core.id/schema},
       :zen/desc
       "Fixture Id of source expression or headerField within this variable"},
      :_sourceId {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :defaultValue
      {:confirms #{hl7-fhir-r4-core.string/schema},
       :zen/desc
       "Default, hard-coded, or user-defined value for this variable"}},
     :require #{:name},
     :zen/desc "Placeholder for evaluated elements"}},
   :publisher
   {:confirms #{hl7-fhir-r4-core.string/schema},
    :fhir/flags #{:SU},
    :zen/desc "Name of the publisher (organization or individual)"},
   :jurisdiction
   {:type zen/vector,
    :every
    {:confirms #{hl7-fhir-r4-core.CodeableConcept/schema},
     :fhir/flags #{:SU},
     :zen/desc
     "Intended jurisdiction for test script (if applicable)"}},
   :_publisher {:confirms #{hl7-fhir-r4-core.Element/schema}},
   :purpose
   {:confirms #{hl7-fhir-r4-core.markdown/schema},
    :zen/desc "Why this test script is defined"},
   :_date {:confirms #{hl7-fhir-r4-core.Element/schema}},
   :name
   {:confirms #{hl7-fhir-r4-core.string/schema},
    :fhir/flags #{:SU},
    :zen/desc "Name for this test script (computer friendly)"},
   :_status {:confirms #{hl7-fhir-r4-core.Element/schema}},
   :_experimental {:confirms #{hl7-fhir-r4-core.Element/schema}},
   :useContext
   {:type zen/vector,
    :every
    {:confirms #{hl7-fhir-r4-core.UsageContext/schema},
     :fhir/flags #{:SU},
     :zen/desc "The context that the content is intended to support"}},
   :copyright
   {:confirms #{hl7-fhir-r4-core.markdown/schema},
    :zen/desc "Use and/or publishing restrictions"},
   :experimental
   {:confirms #{hl7-fhir-r4-core.boolean/schema},
    :fhir/flags #{:SU},
    :zen/desc "For testing purposes, not real usage"},
   :title
   {:confirms #{hl7-fhir-r4-core.string/schema},
    :fhir/flags #{:SU},
    :zen/desc "Name for this test script (human friendly)"},
   :_description {:confirms #{hl7-fhir-r4-core.Element/schema}},
   :setup
   {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
    :type zen/map,
    :keys
    {:action
     {:type zen/vector,
      :every
      {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
       :type zen/map,
       :keys
       {:operation
        {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
         :type zen/map,
         :keys
         {:description
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "Tracking/reporting operation description"},
          :_destination {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_accept {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_params {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_encodeRequestUrl
          {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_targetId {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :method
          {:confirms #{hl7-fhir-r4-core.code/schema},
           :zen.fhir/value-set
           {:symbol
            hl7-fhir-r4-core.value-set.http-operations/value-set,
            :strength :required},
           :zen/desc
           "delete | get | options | patch | post | put | head"},
          :targetId
          {:confirms #{hl7-fhir-r4-core.id/schema},
           :zen/desc
           "Id of fixture used for extracting the [id],  [type], and [vid] for GET requests"},
          :_contentType {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :requestHeader
          {:type zen/vector,
           :every
           {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
            :type zen/map,
            :keys
            {:field
             {:confirms #{hl7-fhir-r4-core.string/schema},
              :zen/desc "HTTP header field name"},
             :_field {:confirms #{hl7-fhir-r4-core.Element/schema}},
             :value
             {:confirms #{hl7-fhir-r4-core.string/schema},
              :zen/desc "HTTP headerfield value"},
             :_value {:confirms #{hl7-fhir-r4-core.Element/schema}}},
            :require #{:value :field},
            :zen/desc
            "Each operation can have one or more header elements"}},
          :_method {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :params
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "Explicitly defined path parameters"},
          :type
          {:confirms #{hl7-fhir-r4-core.Coding/schema},
           :zen/desc "The operation code type that will be executed"},
          :_origin {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_description {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :requestId
          {:confirms #{hl7-fhir-r4-core.id/schema},
           :zen/desc "Fixture Id of mapped request"},
          :encodeRequestUrl
          {:confirms #{hl7-fhir-r4-core.boolean/schema},
           :zen/desc
           "Whether or not to send the request url in encoded format"},
          :_label {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_resource {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :label
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "Tracking/logging operation label"},
          :resource
          {:confirms #{hl7-fhir-r4-core.code/schema},
           :zen.fhir/value-set
           {:symbol hl7-fhir-r4-core.value-set.defined-types/value-set,
            :strength :required},
           :zen/desc "Resource type"},
          :url
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "Request URL"},
          :origin
          {:confirms #{hl7-fhir-r4-core.integer/schema},
           :zen/desc "Server initiating the request"},
          :contentType
          {:confirms #{hl7-fhir-r4-core.code/schema},
           :zen.fhir/value-set
           {:symbol hl7-fhir-r4-core.value-set.mimetypes/value-set,
            :strength :required},
           :zen/desc
           "Mime type of the request payload contents, with charset etc."},
          :_responseId {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :sourceId
          {:confirms #{hl7-fhir-r4-core.id/schema},
           :zen/desc "Fixture Id of body for PUT and POST requests"},
          :responseId
          {:confirms #{hl7-fhir-r4-core.id/schema},
           :zen/desc "Fixture Id of mapped response"},
          :_sourceId {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_requestId {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :destination
          {:confirms #{hl7-fhir-r4-core.integer/schema},
           :zen/desc "Server responding to the request"},
          :_url {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :accept
          {:confirms #{hl7-fhir-r4-core.code/schema},
           :zen.fhir/value-set
           {:symbol hl7-fhir-r4-core.value-set.mimetypes/value-set,
            :strength :required},
           :zen/desc
           "Mime type to accept in the payload of the response, with charset etc."}},
         :require #{:encodeRequestUrl},
         :zen/desc "The setup operation to perform"},
        :assert
        {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
         :type zen/map,
         :keys
         {:response
          {:confirms #{hl7-fhir-r4-core.code/schema},
           :zen.fhir/value-set
           {:symbol
            hl7-fhir-r4-core.value-set.assert-response-code-types/value-set,
            :strength :required},
           :zen/desc
           "okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable"},
          :description
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "Tracking/reporting assertion description"},
          :path
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "XPath or JSONPath expression"},
          :headerField
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "HTTP header field name"},
          :compareToSourceId
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "Id of the source fixture to be evaluated"},
          :_operator {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_response {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_navigationLinks
          {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_direction {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :expression
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "The FHIRPath expression to be evaluated"},
          :_compareToSourceId
          {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_path {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_contentType {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :value
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "The value to compare to"},
          :_requestMethod
          {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_responseCode
          {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :warningOnly
          {:confirms #{hl7-fhir-r4-core.boolean/schema},
           :zen/desc
           "Will this assert produce a warning only on error?"},
          :_value {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_validateProfileId
          {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_expression {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_description {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :compareToSourceExpression
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc
           "The FHIRPath expression to evaluate against the source fixture"},
          :_label {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_resource {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_requestURL {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_headerField {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :label
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "Tracking/logging assertion label"},
          :resource
          {:confirms #{hl7-fhir-r4-core.code/schema},
           :zen.fhir/value-set
           {:symbol hl7-fhir-r4-core.value-set.defined-types/value-set,
            :strength :required},
           :zen/desc "Resource type"},
          :responseCode
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "HTTP response code to test"},
          :minimumId
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "Fixture Id of minimum content resource"},
          :operator
          {:confirms #{hl7-fhir-r4-core.code/schema},
           :zen.fhir/value-set
           {:symbol
            hl7-fhir-r4-core.value-set.assert-operator-codes/value-set,
            :strength :required},
           :zen/desc
           "equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains | eval"},
          :contentType
          {:confirms #{hl7-fhir-r4-core.code/schema},
           :zen.fhir/value-set
           {:symbol hl7-fhir-r4-core.value-set.mimetypes/value-set,
            :strength :required},
           :zen/desc
           "Mime type to compare against the 'Content-Type' header"},
          :compareToSourcePath
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc
           "XPath or JSONPath expression to evaluate against the source fixture"},
          :validateProfileId
          {:confirms #{hl7-fhir-r4-core.id/schema},
           :zen/desc "Profile Id of validation profile reference"},
          :_compareToSourceExpression
          {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :sourceId
          {:confirms #{hl7-fhir-r4-core.id/schema},
           :zen/desc "Fixture Id of source expression or headerField"},
          :_warningOnly {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_sourceId {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :requestMethod
          {:confirms #{hl7-fhir-r4-core.code/schema},
           :zen.fhir/value-set
           {:symbol
            hl7-fhir-r4-core.value-set.http-operations/value-set,
            :strength :required},
           :zen/desc
           "delete | get | options | patch | post | put | head"},
          :_compareToSourcePath
          {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :_minimumId {:confirms #{hl7-fhir-r4-core.Element/schema}},
          :requestURL
          {:confirms #{hl7-fhir-r4-core.string/schema},
           :zen/desc "Request URL comparison value"},
          :direction
          {:confirms #{hl7-fhir-r4-core.code/schema},
           :zen.fhir/value-set
           {:symbol
            hl7-fhir-r4-core.value-set.assert-direction-codes/value-set,
            :strength :required},
           :zen/desc "response | request"},
          :navigationLinks
          {:confirms #{hl7-fhir-r4-core.boolean/schema},
           :zen/desc "Perform validation on navigation links?"}},
         :require #{:warningOnly},
         :zen/desc "The assertion to perform"}},
       :zen/desc "A setup operation or assert to perform"},
      :minItems 1}},
    :require #{:action},
    :zen/desc
    "A series of required setup operations before tests are executed"},
   :_purpose {:confirms #{hl7-fhir-r4-core.Element/schema}},
   :status
   {:confirms #{hl7-fhir-r4-core.code/schema},
    :fhir/flags #{:SU :?!},
    :zen.fhir/value-set
    {:symbol hl7-fhir-r4-core.value-set.publication-status/value-set,
     :strength :required},
    :zen/desc "draft | active | retired | unknown"},
   :_name {:confirms #{hl7-fhir-r4-core.Element/schema}},
   :url
   {:confirms #{hl7-fhir-r4-core.uri/schema},
    :fhir/flags #{:SU},
    :zen/desc
    "Canonical identifier for this test script, represented as a URI (globally unique)"},
   :identifier
   {:confirms #{hl7-fhir-r4-core.Identifier/schema},
    :fhir/flags #{:SU},
    :zen/desc "Additional identifier for the test script"},
   :_copyright {:confirms #{hl7-fhir-r4-core.Element/schema}},
   :origin
   {:type zen/vector,
    :every
    {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
     :type zen/map,
     :keys
     {:index
      {:confirms #{hl7-fhir-r4-core.integer/schema},
       :zen/desc
       "The index of the abstract origin server starting at 1"},
      :_index {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :profile
      {:confirms #{hl7-fhir-r4-core.Coding/schema},
       :zen/desc "FHIR-Client | FHIR-SDC-FormFiller"}},
     :require #{:index :profile},
     :zen/desc
     "An abstract server representing a client or sender in a message exchange"}},
   :_title {:confirms #{hl7-fhir-r4-core.Element/schema}},
   :fixture
   {:type zen/vector,
    :every
    {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
     :type zen/map,
     :keys
     {:autocreate
      {:confirms #{hl7-fhir-r4-core.boolean/schema},
       :zen/desc
       "Whether or not to implicitly create the fixture during setup"},
      :_autocreate {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :autodelete
      {:confirms #{hl7-fhir-r4-core.boolean/schema},
       :zen/desc
       "Whether or not to implicitly delete the fixture during teardown"},
      :_autodelete {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :resource
      {:confirms
       #{hl7-fhir-r4-core.Reference/schema zen.fhir/Reference},
       :zen.fhir/reference {:refers #{}},
       :zen/desc "Reference of the resource"}},
     :require #{:autodelete :autocreate},
     :zen/desc "Fixture in the test script - by reference (uri)"}},
   :version
   {:confirms #{hl7-fhir-r4-core.string/schema},
    :fhir/flags #{:SU},
    :zen/desc "Business version of the test script"},
   :_version {:confirms #{hl7-fhir-r4-core.Element/schema}},
   :teardown
   {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
    :type zen/map,
    :keys
    {:action
     {:type zen/vector,
      :every
      {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
       :type zen/map,
       :keys
       {:operation #:zen{:desc "The teardown operation to perform"}},
       :require #{:operation},
       :zen/desc "One or more teardown operations to perform"},
      :minItems 1}},
    :require #{:action},
    :zen/desc "A series of required clean up steps"},
   :contact
   {:type zen/vector,
    :every
    {:confirms #{hl7-fhir-r4-core.ContactDetail/schema},
     :fhir/flags #{:SU},
     :zen/desc "Contact details for the publisher"}},
   :metadata
   {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
    :type zen/map,
    :keys
    {:link
     {:type zen/vector,
      :every
      {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
       :type zen/map,
       :keys
       {:url
        {:confirms #{hl7-fhir-r4-core.uri/schema},
         :zen/desc "URL to the specification"},
        :_url {:confirms #{hl7-fhir-r4-core.Element/schema}},
        :description
        {:confirms #{hl7-fhir-r4-core.string/schema},
         :zen/desc "Short description"},
        :_description {:confirms #{hl7-fhir-r4-core.Element/schema}}},
       :require #{:url},
       :zen/desc "Links to the FHIR specification"}},
     :capability
     {:type zen/vector,
      :every
      {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
       :type zen/map,
       :keys
       {:description
        {:confirms #{hl7-fhir-r4-core.string/schema},
         :zen/desc "The expected capabilities of the server"},
        :capabilities
        {:confirms #{hl7-fhir-r4-core.canonical/schema},
         :zen/desc "Required Capability Statement"},
        :_destination {:confirms #{hl7-fhir-r4-core.Element/schema}},
        :_link
        {:type zen/vector,
         :every {:confirms #{hl7-fhir-r4-core.Element/schema}}},
        :_origin
        {:type zen/vector,
         :every {:confirms #{hl7-fhir-r4-core.Element/schema}}},
        :_required {:confirms #{hl7-fhir-r4-core.Element/schema}},
        :_description {:confirms #{hl7-fhir-r4-core.Element/schema}},
        :_validated {:confirms #{hl7-fhir-r4-core.Element/schema}},
        :link
        {:type zen/vector,
         :every
         {:confirms #{hl7-fhir-r4-core.uri/schema},
          :zen/desc "Links to the FHIR specification"}},
        :_capabilities {:confirms #{hl7-fhir-r4-core.Element/schema}},
        :origin
        {:type zen/vector,
         :every
         {:confirms #{hl7-fhir-r4-core.integer/schema},
          :zen/desc
          "Which origin server these requirements apply to"}},
        :validated
        {:confirms #{hl7-fhir-r4-core.boolean/schema},
         :zen/desc "Are the capabilities validated?"},
        :destination
        {:confirms #{hl7-fhir-r4-core.integer/schema},
         :zen/desc "Which server these requirements apply to"},
        :required
        {:confirms #{hl7-fhir-r4-core.boolean/schema},
         :zen/desc "Are the capabilities required?"}},
       :require #{:capabilities :validated :required},
       :zen/desc
       "Capabilities  that are assumed to function correctly on the FHIR server being tested"},
      :minItems 1}},
    :require #{:capability},
    :zen/desc
    "Required capability that is assumed to function correctly on the FHIR server being tested"},
   :destination
   {:type zen/vector,
    :every
    {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
     :type zen/map,
     :keys
     {:index
      {:confirms #{hl7-fhir-r4-core.integer/schema},
       :zen/desc
       "The index of the abstract destination server starting at 1"},
      :_index {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :profile
      {:confirms #{hl7-fhir-r4-core.Coding/schema},
       :zen/desc
       "FHIR-Server | FHIR-SDC-FormManager | FHIR-SDC-FormReceiver | FHIR-SDC-FormProcessor"}},
     :require #{:index :profile},
     :zen/desc
     "An abstract server representing a destination or receiver in a message exchange"}},
   :test
   {:type zen/vector,
    :every
    {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
     :type zen/map,
     :keys
     {:name
      {:confirms #{hl7-fhir-r4-core.string/schema},
       :zen/desc "Tracking/logging name of this test"},
      :_name {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :description
      {:confirms #{hl7-fhir-r4-core.string/schema},
       :zen/desc "Tracking/reporting short description of the test"},
      :_description {:confirms #{hl7-fhir-r4-core.Element/schema}},
      :action
      {:type zen/vector,
       :every
       {:confirms #{hl7-fhir-r4-core.BackboneElement/schema},
        :type zen/map,
        :keys
        {:operation #:zen{:desc "The setup operation to perform"},
         :assert #:zen{:desc "The setup assertion to perform"}},
        :zen/desc "A test operation or assert to perform"},
       :minItems 1}},
     :require #{:action},
     :zen/desc "A test in this script"}},
   :_url {:confirms #{hl7-fhir-r4-core.Element/schema}},
   :profile
   {:type zen/vector,
    :every
    {:confirms #{hl7-fhir-r4-core.Reference/schema zen.fhir/Reference},
     :zen.fhir/reference {:refers #{}},
     :zen/desc "Reference of the validation profile"}}},
  :zen.fhir/type "TestScript"}}